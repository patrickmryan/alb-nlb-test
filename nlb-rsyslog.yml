
AWSTemplateFormatVersion: '2010-09-09'
#
# Patrick M. Ryan
# Cloud Practice Lead
# patrick.ryan@evanschambers.com
#
#
# Syslog ports:
#    Cisco FMC    514   (TCP, UDP)
#    Cisco FTD    20550 (TCP)
#    Palo Alto VM 20650 (TCP
#

Mappings:
   # need way to select SW version, too
   RegionMap:
     us-east-1:
       AMI: ami-062f7200baf2fa504
     us-east-2:
       AMI: ami-01aab85a5e4a5a0fe
     us-west-1:
       AMI: ami-0577b787189839998
     us-west-2:
       AMI: ami-0518bb0e75d3619ca

Parameters:
  InterfaceVpcId:
    Type: AWS::EC2::VPC::Id
  SourcesCidrBlock:
    Type: String
    Default: 0.0.0.0/0
  InstanceRole:
    Type: String
    Description: ID of IAM instance profile role that provides access to S3 and CloudWatch
  SyslogConfigFiles:
    Type: String
    Description: S3 key for CloudWatch configuration file archive
    Default: rsyslog-files.tar
  CodeBucket:
    Type: String
    Description: Name of S3 bucket that contains the code and config files
  SyslogSubnets:
    Type: List<AWS::EC2::Subnet::Id>
  # KeyName:
  #   Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
  #   Type: AWS::EC2::KeyPair::KeyName
  #   ConstraintDescription: must be the name of an existing EC2 KeyPair.
  LogGroupName:
    Type: String

Resources:
  SyslogLaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateData:
        IamInstanceProfile:
          Name: !Ref InstanceRole
        # ImageId: !Ref SyslogAMI
        ImageId: !FindInMap [ RegionMap, !Ref 'AWS::Region', AMI ]
        InstanceType: t2.micro
        # KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref SyslogTrafficSecurityGroup
        # NetworkInterfaces:
        #   - DeviceIndex: 0
        #     AssociatePublicIpAddress: false
        #     Groups:
        #       - !Ref SyslogTrafficSecurityGroup
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: "Name"
                Value: !Sub '${AWS::StackName} - rsyslogd'
        UserData:
          Fn::Base64:
            !Sub |
              #!/bin/bash -xe

              yum install jq python3 -y
              pip3 install boto3

              cd /tmp
              aws s3 cp --quiet s3://${CodeBucket}/${SyslogConfigFiles} .

              # configure the syslog outputs
              cd /etc/rsyslog.d
              conf=cwall-rsyslog.conf
              template=$conf.template
              tar xvf /tmp/${SyslogConfigFiles} $template
              perl -p -e "s/__LOG_GROUP__/${LogGroupName}/;" < $template > $conf
              chmod 644 $conf
              chown -R root:root $conf
              rm -f $template

              cd /usr/local/bin
              forwarder=forward-to-cloudwatch.py
              tar xvf /tmp/${SyslogConfigFiles} $forwarder
              chown -R root:root $forwarder
              chmod 644 $forwarder

              systemctl enable --now rsyslog
              sleep 10
              systemctl restart rsyslog
              ss -a | grep 20550

  SyslogTargetGroupTCP20650:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 20650
      Protocol: TCP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetType: instance
      VpcId: !Ref InterfaceVpcId
      Tags:
        - Key: Name
          Value: !Sub 'PAVM logs'

  SyslogTargetGroupTCP20550:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 20550
      Protocol: TCP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetType: instance
      VpcId: !Ref InterfaceVpcId
      Tags:
        - Key: Name
          Value: !Sub 'Cisco FTD logs'

  SyslogTargetGroupUDP514:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port: 514
      Protocol: UDP
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      TargetType: instance
      VpcId: !Ref InterfaceVpcId
      Tags:
        - Key: Name
          Value: !Sub 'Cisco FMC logs'

  SyslogAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      #AvailabilityZones: !Ref AvailabilityZones
      Cooldown: 60
      DesiredCapacity: 2
      HealthCheckGracePeriod: 10
      HealthCheckType: EC2
      LaunchTemplate:
        LaunchTemplateId: !Ref SyslogLaunchTemplate
        Version: !GetAtt SyslogLaunchTemplate.LatestVersionNumber
      MaxSize: 4
      MinSize: 2
      TargetGroupARNs:
        - !Ref SyslogTargetGroupTCP20650
        - !Ref SyslogTargetGroupTCP20550
        - !Ref SyslogTargetGroupUDP514
      VPCZoneIdentifier: !Ref SyslogSubnets

  SyslogListenerTCP20650:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SyslogTargetGroupTCP20650
      LoadBalancerArn: !Ref SyslogNetworkLoadBalancer
      Port: 20650
      Protocol: TCP

  SyslogListenerTCP20550:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SyslogTargetGroupTCP20550
      LoadBalancerArn: !Ref SyslogNetworkLoadBalancer
      Port: 20550
      Protocol: TCP

  SyslogListenerUDP514:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref SyslogTargetGroupUDP514
      LoadBalancerArn: !Ref SyslogNetworkLoadBalancer
      Port: 514
      Protocol: UDP

  SyslogNetworkLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type: network
      Scheme: internal
      Subnets: !Ref SyslogSubnets

  SyslogTrafficSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Inbound syslog traffic
      VpcId: !Ref InterfaceVpcId
      SecurityGroupIngress:
      # remote syslog ports
      # FMC sends audit data to udp 514
      - IpProtocol: udp
        FromPort: 514
        ToPort: 514
        CidrIp: !Ref SourcesCidrBlock
      # # Cisco uses UDP echo
      # - IpProtocol: udp
      #   FromPort: 7
      #   ToPort: 7
      #   CidrIp: !Ref SourcesCidrBlock
      # allowing traffic on TCP 514 for NLB health check. not sure this works.
      - IpProtocol: tcp
        FromPort: 514
        ToPort: 514
        CidrIp: !Ref SourcesCidrBlock
      # Using TCP 20550 for FTD
      - IpProtocol: tcp
        FromPort: 20550
        ToPort: 20550
        CidrIp: !Ref SourcesCidrBlock
      # Using TCP 20650 for PAVM
      - IpProtocol: tcp
        FromPort: 20650
        ToPort: 20650
        CidrIp: !Ref SourcesCidrBlock
      # Allow all traffic from within the VPC.
      # Remove this once we figure out wtf Cisco is doing.
      - IpProtocol: -1
        CidrIp: !Ref SourcesCidrBlock
        Description: Allow all traffic from within the VPC. Cisco seems to use additional ports and protocols.
      Tags:
        - Key: "Name"
          Value: !Sub '${AWS::StackName} - syslog traffic'
